<?xml version="1.0" encoding="utf-8"?><testsuite errors="2" failures="0" name="" skips="0" tests="0" time="0.273"><testcase classname="scripts.LoginTest.CheckLoginExample" name="test_login_show_gear" time="0.000543117523193"><error message="test setup failure">self = &lt;LoginTest.CheckLoginExample object at 0x101710f10&gt;
method = &lt;bound method CheckLoginExample.test_login_show_gear of &lt;LoginTest.CheckLoginExample object at 0x101710f10&gt;&gt;

    def setup_method(self, method):
        &quot;&quot;&quot;
            Parent class of all script classes used for custom asserts (usually &apos;soft&apos; asserts) and shared fixture setup
            and teardown
            &quot;&quot;&quot;
        self.cf = saunter.ConfigWrapper.ConfigWrapper().config
        self.config = self.cf
    
        self.current_method_name = method.__name__
    
        browser = self.cf.get(&quot;Selenium&quot;, &quot;browser&quot;)
        if browser[0] == &quot;*&quot;:
            browser = browser[1:]
    
        profile = None
        if browser == &apos;firefox&apos;:
            if self.cf.has_option(&quot;Selenium&quot;, &quot;profile-%s&quot; % sys.platform):
                profile_path = os.path.join(self.cf.get(&quot;Saunter&quot;, &quot;base&quot;), &apos;support&apos;, &apos;profiles&apos;, self.cf.get(&quot;Selenium&quot;, &quot;profile-%s&quot; % sys.platform))
            elif self.cf.has_option(&quot;Selenium&quot;, &quot;profile&quot;):
                profile_path = os.path.join(self.cf.get(&quot;Saunter&quot;, &quot;base&quot;), &apos;support&apos;, &apos;profiles&apos;, self.cf.get(&quot;Selenium&quot;, &quot;profile&quot;))
            else:
                profile_path = None
    
            if profile_path:
                if os.path.isdir(profile_path):
                    profile = FirefoxProfile(profile_path)
                else:
                    raise ProfileNotFound(&quot;Profile not found at %s&quot; % profile_path)
    
        if self.cf.getboolean(&quot;SauceLabs&quot;, &quot;ondemand&quot;):
            desired_capabilities = {
                &quot;platform&quot;: self.cf.get(&quot;SauceLabs&quot;, &quot;os&quot;),
                &quot;browserName&quot;: self.cf.get(&quot;SauceLabs&quot;, &quot;browser&quot;),
                &quot;version&quot;: self.cf.get(&quot;SauceLabs&quot;, &quot;browser_version&quot;),
                &quot;name&quot;: method.__name__
            }
            if desired_capabilities[&quot;browserName&quot;][0] == &quot;*&quot;:
                desired_capabilities[&quot;browserName&quot;] = desired_capabilities[&quot;browserName&quot;][1:]
            if desired_capabilities[&quot;platform&quot;] in os_map:
                desired_capabilities[&quot;platform&quot;] = os_map[desired_capabilities[&quot;platform&quot;]]
    
            if self.cf.has_option(&quot;SauceLabs&quot;, &quot;selenium_version&quot;):
                desired_capabilities[&apos;selenium-version&apos;] = self.cf.get(&apos;SauceLabs&apos;, &apos;selenium_version&apos;)
    
            command_executor = &quot;http://%s:%s@ondemand.saucelabs.com:80/wd/hub&quot; % (self.cf.get(&quot;SauceLabs&quot;, &quot;username&quot;), self.cf.get(&quot;SauceLabs&quot;, &quot;key&quot;))
        else:
    
            if browser == &quot;chrome&quot;:
                os.environ[&quot;webdriver.chrome.driver&quot;] = self.cf.get(&quot;Selenium&quot;, &quot;chromedriver_path&quot;)
            desired_capabilities = capabilities_map[browser]
            if self.cf.has_section(&quot;Proxy&quot;) \
                and self.cf.has_option(&quot;Proxy&quot;, &quot;proxy_url&quot;) \
                and (self.cf.has_option(&quot;Proxy&quot;, &quot;browsermob&quot;) and self.cf.getboolean(&quot;Proxy&quot;, &quot;browsermob&quot;)):
                from browsermobproxy import Client
                self.client = Client(self.cf.get(&quot;Proxy&quot;, &quot;proxy_url&quot;))
                self.client.add_to_webdriver_capabilities(desired_capabilities)
            if self.cf.has_section(&quot;Grid&quot;):
                if self.cf.getboolean(&quot;Grid&quot;, &quot;use_grid&quot;) and self.cf.get(&quot;Grid&quot;, &quot;type&quot;) == &quot;selenium&quot;:
                    if self.cf.has_option(&quot;Grid&quot;, &quot;platform&quot;):
                        desired_capabilities[&quot;platform&quot;] = self.cf.get(&quot;Grid&quot;, &quot;platform&quot;).upper()
                    if self.cf.has_option(&quot;Grid&quot;, &quot;version&quot;):
                        desired_capabilities[&quot;version&quot;] = str(self.cf.get(&quot;Grid&quot;, &quot;browser_version&quot;))
    
&gt;           command_executor = &quot;http://%s:%s/wd/hub&quot; % (self.cf.get(&quot;Selenium&quot;, &quot;server_host&quot;), self.cf.get(&quot;Selenium&quot;, &quot;server_port&quot;))

../pysaunter_examples_env/lib/python2.7/site-packages/saunter/testcase/webdriver.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;ConfigParser.SafeConfigParser instance at 0x101094a28&gt;, section = &apos;Selenium&apos;, option = &apos;server_host&apos;, raw = False, vars = None

    def get(self, section, option, raw=False, vars=None):
        &quot;&quot;&quot;Get an option value for a given section.
    
            If `vars&apos; is provided, it must be a dictionary. The option is looked up
            in `vars&apos; (if provided), `section&apos;, and in `defaults&apos; in that order.
    
            All % interpolations are expanded in the return values, unless the
            optional argument `raw&apos; is true. Values for interpolation keys are
            looked up in the same manner as the option.
    
            The section DEFAULT is special.
            &quot;&quot;&quot;
        sectiondict = {}
        try:
            sectiondict = self._sections[section]
        except KeyError:
            if section != DEFAULTSECT:
                raise NoSectionError(section)
        # Update with the entry specific variables
        vardict = {}
        if vars:
            for key, value in vars.items():
                vardict[self.optionxform(key)] = value
        d = _Chainmap(vardict, sectiondict, self._defaults)
        option = self.optionxform(option)
        try:
            value = d[option]
        except KeyError:
&gt;           raise NoOptionError(option, section)
E           NoOptionError: No option &apos;server_host&apos; in section: &apos;Selenium&apos;

/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ConfigParser.py:610: NoOptionError</error></testcase><testcase classname="scripts.LoginTest.CheckLoginExample" name="test_login_show_gear" time="0.000463962554932"><error message="test setup failure">__multicall__ = &lt;MultiCall 0 results, 0 meths, kwargs={&apos;item&apos;: &lt;Function &apos;test_login_show_gear&apos;&gt;, &apos;nextitem&apos;: None}&gt;, item = &lt;Function &apos;test_login_show_gear&apos;&gt;

    def pytest_runtest_teardown(__multicall__, item):
&gt;       __multicall__.execute()

conftest.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;MultiCall 0 results, 0 meths, kwargs={&apos;item&apos;: &lt;Function &apos;test_login_show_gear&apos;&gt;, &apos;nextitem&apos;: None}&gt;

    def execute(self):
        while self.methods:
            method = self.methods.pop()
            kwargs = self.getkwargs(method)
&gt;           res = method(**kwargs)

../pysaunter_examples_env/lib/python2.7/site-packages/_pytest/core.py:370: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

item = &lt;Function &apos;test_login_show_gear&apos;&gt;, nextitem = None

    def pytest_runtest_teardown(item, nextitem):
&gt;       item.session._setupstate.teardown_exact(item, nextitem)

../pysaunter_examples_env/lib/python2.7/site-packages/_pytest/runner.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;_pytest.runner.SetupState object at 0x101806e90&gt;, item = &lt;Function &apos;test_login_show_gear&apos;&gt;, nextitem = None

    def teardown_exact(self, item, nextitem):
        needed_collectors = nextitem and nextitem.listchain() or []
&gt;       self._teardown_towards(needed_collectors)

../pysaunter_examples_env/lib/python2.7/site-packages/_pytest/runner.py:340: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;_pytest.runner.SetupState object at 0x101806e90&gt;, needed_collectors = []

    def _teardown_towards(self, needed_collectors):
        while self.stack:
            if self.stack == needed_collectors[:len(self.stack)]:
                break
&gt;           self._pop_and_teardown()

../pysaunter_examples_env/lib/python2.7/site-packages/_pytest/runner.py:346: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;_pytest.runner.SetupState object at 0x101806e90&gt;

    def _pop_and_teardown(self):
        colitem = self.stack.pop()
&gt;       self._teardown_with_finalization(colitem)

../pysaunter_examples_env/lib/python2.7/site-packages/_pytest/runner.py:315: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;_pytest.runner.SetupState object at 0x101806e90&gt;, colitem = &lt;Function &apos;test_login_show_gear&apos;&gt;

    def _teardown_with_finalization(self, colitem):
        self._callfinalizers(colitem)
        if hasattr(colitem, &quot;teardown&quot;):
&gt;           colitem.teardown()

../pysaunter_examples_env/lib/python2.7/site-packages/_pytest/runner.py:326: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Function &apos;test_login_show_gear&apos;&gt;

    def teardown(self):
        &quot;&quot;&quot; perform teardown for this test function. &quot;&quot;&quot;
        if inspect.ismethod(self.obj):
            name = &apos;teardown_method&apos;
        else:
            name = &apos;teardown_function&apos;
        obj = self.parent.obj
        teardown_func_or_meth = xunitsetup(obj, name)
        if teardown_func_or_meth is not None:
&gt;           teardown_func_or_meth(self.obj)

../pysaunter_examples_env/lib/python2.7/site-packages/_pytest/python.py:461: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;LoginTest.CheckLoginExample object at 0x101710f10&gt;
method = &lt;bound method CheckLoginExample.test_login_show_gear of &lt;LoginTest.CheckLoginExample object at 0x101710f10&gt;&gt;

    def teardown_method(self, method):
        &quot;&quot;&quot;
            Default teardown method for all scripts. If run through Sauce Labs OnDemand, the job name, status and tags
            are updated. Also the video and server log are downloaded if so configured.
            &quot;&quot;&quot;
        if hasattr(self, &quot;config&quot;) and not self.config.getboolean(&quot;SauceLabs&quot;, &quot;ondemand&quot;):
&gt;           self.take_named_screenshot(&quot;final&quot;)

../pysaunter_examples_env/lib/python2.7/site-packages/saunter/testcase/webdriver.py:167: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;LoginTest.CheckLoginExample object at 0x101710f10&gt;, name = &apos;final&apos;

    def take_named_screenshot(self, name):
        method_dir = self._screenshot_prep_dirs()
    
        image_path = os.path.join(method_dir, str(name) + &quot;.png&quot;)
&gt;       self.driver.get_screenshot_as_file(image_path)
E       AttributeError: &apos;CheckLoginExample&apos; object has no attribute &apos;driver&apos;

../pysaunter_examples_env/lib/python2.7/site-packages/saunter/testcase/webdriver.py:188: AttributeError</error></testcase></testsuite>